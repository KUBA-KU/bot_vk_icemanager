import logging
import time
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from concurrent.futures import ThreadPoolExecutor
import threading
from typing import Dict, List, Tuple, Callable, Any, Optional, Union

import database as db
from commands import CommandRegistry
from utils import parse_command, parse_time, format_time_delta

logger = logging.getLogger(__name__)

# –ò–µ—Ä–∞—Ä—Ö–∏—è —Ä–æ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
ROLE_HIERARCHY = {
    "user": 1,            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    "moderator": 2,       # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä
    "senior_moderator": 3, # –°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    "admin": 4,           # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    "creator": 5          # –°–æ–∑–¥–∞—Ç–µ–ª—å
}

class VkBot:
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å VK –±–æ—Ç–∞.
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è.
    def __init__(self, group_id: str, token: str, command_cooldown: int = 3, log_peer_id: Optional[str] = None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –±–æ—Ç–∞.
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
# group_id: ID –≥—Ä—É–ø–ø—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
# token: API —Ç–æ–∫–µ–Ω VK
# command_cooldown: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
# log_peer_id: ID –±–µ—Å–µ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.group_id = group_id
        self.vk_session = vk_api.VkApi(token=token)
        self.vk = self.vk_session.get_api()
        self.longpoll = VkBotLongPoll(self.vk_session, group_id)
        self.command_cooldown = command_cooldown
        self.log_peer_id = log_peer_id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if self.log_peer_id:
            logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. ID –±–µ—Å–µ–¥—ã –¥–ª—è –ª–æ–≥–æ–≤: {self.log_peer_id}")
        else:
            logger.warning("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ: –Ω–µ —É–∫–∞–∑–∞–Ω ID –±–µ—Å–µ–¥—ã –¥–ª—è –ª–æ–≥–æ–≤")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_command_time = {}  # –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞: {user_id: timestamp}
        self.quiet_mode = False  # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–µ–∑ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
        
        # –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.executor = ThreadPoolExecutor(max_workers=10)
        
        # –û—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.delete_queue = []
        self.delete_lock = threading.Lock()
        
        # Register commands
        self.commands = CommandRegistry(self)
        
        logger.info(f"VK Bot initialized with group_id: {group_id}")

    def send_message(self, peer_id: int, message: str) -> Optional[int]:
        # Send a message to a conversation.
#
# Args:
# peer_id: Conversation ID
# message: Message text
#
# Returns:
# Message ID or None if sending failed
        try:
            result = self.vk.messages.send(
                peer_id=peer_id,
                message=message,
                random_id=vk_api.utils.get_random_id()
            )
            logger.info(f"Message sent to peer_id {peer_id}: {message[:50]}...")
            return result
        except Exception as e:
            logger.error(f"Failed to send message: {str(e)}")
            return None

    def delete_message(self, peer_id: int, message_id: int) -> bool:
        # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–µ—Å–µ–¥—ã.
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
# peer_id: ID –±–µ—Å–µ–¥—ã
# message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
#
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
# True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        # –¥–ª—è –±–µ—Å–µ–¥—ã
        if peer_id > 2000000000:
            # –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ cmids (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞)
            try:
                # —Ö–∑ –ø–æ—á–µ–º—É, –Ω–æ –≤–∫ —á–µ—Ä–µ–∑ —Ä–∞–∑ —É–¥–∞–ª—è–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å —Ç–∞–∫
                self.vk.messages.delete(
                    delete_for_all=1,
                    cmids=int(message_id),
                    peer_id=peer_id
                )
                # –µ—Å–ª–∏ –¥–æ—à–ª–æ –¥–æ —ç—Ç–æ–π —Å—Ç—Ä–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –æ–∫
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ (–±–µ—Å–µ–¥–∞ {peer_id})")
                return True
            except Exception as err:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–æ—Å–æ–± 1): {str(err)}")
            
            # –≤–∫ –∏–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–∏—Å–æ–∫
            try:
                self.vk.messages.delete(
                    delete_for_all=1,
                    message_ids=[int(message_id)],
                    peer_id=peer_id
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ —Å–ø–∏—Å–∫–æ–º (–±–µ—Å–µ–¥–∞ {peer_id})")
                return True
            except Exception as err:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–æ—Å–æ–± 2): {str(err)}")
            
            # –µ—Å–ª–∏ –≤—Å–µ –ø–ª–æ—Ö–æ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—Ç—Ä–æ–∫—É
            try:
                self.vk.messages.delete(
                    delete_for_all=1,
                    message_ids=str(message_id),
                    peer_id=peer_id
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫–æ–π (–±–µ—Å–µ–¥–∞ {peer_id})")
                return True
            except Exception as err:
                # –Ω—É –≤—Å–µ, –ø—Ä–∏–µ—Ö–∞–ª–∏
                logger.error(f"–í—Å–µ —Å–ø–æ—Å–æ–±—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {str(err)}")
                return False
        else:
            # –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                self.vk.messages.delete(
                    delete_for_all=1,
                    message_ids=message_id,
                    peer_id=peer_id
                )
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
                return True
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
                return False
            
    def send_log_message(self, action: str, admin_id: int, target_id: Optional[int] = None, 
                        peer_id: Optional[int] = None, details: Optional[str] = None) -> bool:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –±–µ—Å–µ–¥—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
# action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (kick, ban, warn –∏ —Ç.–¥.)
# admin_id: ID –∞–¥–º–∏–Ω–∞/–º–æ–¥–µ—Ä–∞
# target_id: ID —é–∑–µ—Ä–∞, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–æ –¥–µ–π—Å—Ç–≤–∏–µ
# peer_id: ID –±–µ—Å–µ–¥—ã
# details: –î–æ–ø. –∏–Ω—Ñ–∞ (–ø—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞)
#
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
# True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, False –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not self.log_peer_id:
            logger.warning("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ (–Ω–µ—Ç ID –±–µ—Å–µ–¥—ã –¥–ª—è –ª–æ–≥–æ–≤)")
            return False
            
        try:
            # –∏–Ω—Ñ–∞ –æ –º–æ–¥–µ—Ä–µ
            admin_info = self.vk.users.get(user_ids=admin_id, fields='first_name,last_name')[0]
            admin_name = f"{admin_info['first_name']} {admin_info['last_name']}"
            
            # –∏–Ω—Ñ–∞ –æ —é–∑–µ—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            target_name = "N/A"
            if target_id:
                try:
                    target_info = self.vk.users.get(user_ids=target_id, fields='first_name,last_name')[0]
                    target_name = f"{target_info['first_name']} {target_info['last_name']}"
                except:
                    # –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è
                    target_name = f"ID: {target_id}"
            
            # –∏–Ω—Ñ–∞ –æ –±–µ—Å–µ–¥–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            chat_info = ""
            if peer_id:
                try:
                    chat_id = peer_id - 2000000000
                    chat_name = f"–ë–µ—Å–µ–¥–∞ #{chat_id}"
                    chat_info = f"\nüì¢ –ë–µ—Å–µ–¥–∞: {chat_name}"
                except:
                    chat_info = f"\nüì¢ –ë–µ—Å–µ–¥–∞: ID {peer_id}"
            
            # –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            action_emojis = {
                "kick": "üö™",
                "ban": "üö´",
                "unban": "‚úÖ",
                "warn": "‚ö†Ô∏è",
                "unwarn": "üîÑ",
                "mute": "üîá",
                "unmute": "üîä",
                "set_role": "üî∞",
                "remove_role": "‚õî",
                "quiet": "ü§´",
                "delete": "üóëÔ∏è",
                "message": "üí¨",
                "start": "üöÄ",
                "masskick": "üë•üö™"
            }
            
            # —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
            action_readable = {
                "kick": "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ",
                "ban": "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                "unban": "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
                "warn": "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "unwarn": "–°–Ω—è—Ç–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
                "mute": "–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞",
                "unmute": "–í–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞",
                "set_role": "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏",
                "remove_role": "–°–Ω—è—Ç–∏–µ —Ä–æ–ª–∏",
                "quiet": "–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã",
                "delete": "–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                "message": "–°–æ–æ–±—â–µ–Ω–∏–µ",
                "start": "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞",
                "masskick": "–ú–∞—Å—Å–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"
            }
            
            # —Å–æ–±–∏—Ä–∞–µ–º –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ
            emoji = action_emojis.get(action, "‚ÑπÔ∏è")
            action_text = action_readable.get(action, action.capitalize())
            
            timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))
            
            # —à–∞–±–ª–æ–Ω –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏—è
            log_message = (
                f"{emoji} {action_text}\n\n"
                f"üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: [id{admin_id}|{admin_name}]\n"
            )
            
            # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ —é–∑–µ—Ä–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if target_id:
                log_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [id{target_id}|{target_name}]\n"
                
            # –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if details:
                log_message += f"üìã –î–µ—Ç–∞–ª–∏: {details}\n"
                
            # –∏ –∏–Ω—Ñ—É –æ –±–µ—Å–µ–¥–µ + –≤—Ä–µ–º—è
            log_message += f"{chat_info}\n‚è± –í—Ä–µ–º—è: {timestamp}"
            
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥-–±–µ—Å–µ–¥—É
            result = self.send_message(int(self.log_peer_id), log_message)
            return result is not None
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥: {str(e)}")
            return False

    def is_conversation_member(self, peer_id: int, user_id: int) -> bool:
        # Check if a user is a member of a conversation.
#
# Args:
# peer_id: Conversation ID
# user_id: User ID
#
# Returns:
# True if user is a member, False otherwise
        try:
            conv_members = self.vk.messages.getConversationMembers(peer_id=peer_id)
            items = conv_members.get("items", [])
            return any(item.get("member_id") == user_id for item in items)
        except Exception as e:
            logger.error(f"Error fetching conversation members: {str(e)}")
            return False

    def get_conversation_owner(self, peer_id: int) -> Optional[int]:
        # –ü–æ–ª—É—á–∏—Ç—å ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–µ—Å–µ–¥—ã.
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
# peer_id: ID –±–µ—Å–µ–¥—ã
#
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
# ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        try:
            conv_members = self.vk.messages.getConversationMembers(peer_id=peer_id)
            items = conv_members.get("items", [])
            for item in items:
                if item.get("is_owner", False):
                    return item.get("member_id")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –±–µ—Å–µ–¥—ã: {str(e)}")
            return None

    def is_conversation_owner(self, peer_id: int, user_id: int) -> bool:
        # Check if a user is the owner of a conversation.
#
# Args:
# peer_id: Conversation ID
# user_id: User ID
#
# Returns:
# True if user is the owner, False otherwise
        owner_id = self.get_conversation_owner(peer_id)
        return owner_id == user_id

    def get_conversation_members(self, peer_id: int) -> List[Dict[str, Any]]:
        # Get all members of a conversation.
#
# Args:
# peer_id: Conversation ID
#
# Returns:
# List of conversation members
        try:
            conv_members = self.vk.messages.getConversationMembers(peer_id=peer_id)
            profiles = conv_members.get("profiles", [])
            return [
                {
                    "id": profile["id"],
                    "first_name": profile["first_name"],
                    "last_name": profile["last_name"],
                    "online": profile.get("online", 0)
                }
                for profile in profiles
            ]
        except Exception as e:
            logger.error(f"Error fetching conversation members: {str(e)}")
            return []

    def get_online_members(self, peer_id: int) -> List[Dict[str, Any]]:
        # Get online members of a conversation.
#
# Args:
# peer_id: Conversation ID
#
# Returns:
# List of online conversation members
        members = self.get_conversation_members(peer_id)
        return [member for member in members if member.get("online", 0) == 1]

    def kick_user(self, peer_id: int, user_id: int) -> bool:
        # Kick a user from a conversation.
#
# Args:
# peer_id: Conversation ID
# user_id: User ID
#
# Returns:
# Success status
        try:
            self.vk.messages.removeChatUser(
                chat_id=peer_id - 2000000000,  # Convert peer_id to chat_id
                user_id=user_id
            )
            logger.info(f"Kicked user {user_id} from chat {peer_id}")
            return True
        except Exception as e:
            logger.error(f"Failed to kick user: {str(e)}")
            return False

    def check_access(self, user_id: int, required_role: str, peer_id: Optional[int] = None) -> bool:
        # Check if a user has the required role.
#
# Args:
# user_id: User ID
# required_role: Required role
# peer_id: Conversation ID (optional, for conversation-specific roles)
#
# Returns:
# True if user has sufficient permissions, False otherwise
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω peer_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–π –±–µ—Å–µ–¥–µ
        if peer_id is not None:
            user_role = db.get_role(user_id, peer_id)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω peer_id, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ä–æ–ª—å
            user = db.get_user(user_id)
            if not user:
                return False
            user_role = user["role"]
            
        return ROLE_HIERARCHY.get(user_role, 0) >= ROLE_HIERARCHY.get(required_role, 0)

    def has_rights(self, peer_id: int, user_id: int, required_role: str) -> bool:
        # Check if a user has the required rights.
#
# Args:
# peer_id: Conversation ID
# user_id: User ID
# required_role: Required role
#
# Returns:
# True if user has sufficient rights, False otherwise
        # Conversation owner always has all rights
        is_owner = self.is_conversation_owner(peer_id, user_id)
        has_role_access = self.check_access(user_id, required_role, peer_id)
        return is_owner or has_role_access

    def check_cooldown(self, user_id: int) -> bool:
        # Check if a user is on cooldown.
#
# Args:
# user_id: User ID
#
# Returns:
# True if user is not on cooldown, False otherwise
        now = time.time()
        if user_id in self.last_command_time and now - self.last_command_time[user_id] < self.command_cooldown:
            logger.info(f"User {user_id} is on cooldown.")
            return False
        self.last_command_time[user_id] = now
        return True

    def is_muted(self, user_id: int) -> bool:
        # Check if a user is muted.
#
# Args:
# user_id: User ID
#
# Returns:
# True if user is muted, False otherwise
        mute_until = db.get_mute(user_id)
        now = int(time.time())
        return mute_until > now

    def is_banned(self, user_id: int) -> bool:
        # Check if a user is banned.
#
# Args:
# user_id: User ID
#
# Returns:
# True if user is banned, False otherwise
        return db.get_ban(user_id) is not None
        
    def extract_user_id_from_mention(self, mention: str) -> Optional[int]:
        # –ò–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, ID, —Å—Å—ã–ª–∫–∞).
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
# mention: –¢–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞
#
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
            first_word = mention.split()[0] if ' ' in mention else mention
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ–º (–ø—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ ID)
            if first_word.isdigit():
                return int(first_word)
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ [id123456789|–ò–º—è]
            if first_word.startswith("[") and "|" in first_word and "]" in first_word:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –º–µ–∂–¥—É "id" –∏ "|"
                start_idx = first_word.find("id") + 2
                end_idx = first_word.find("|")
                if start_idx > 1 and end_idx > start_idx:
                    user_id_str = first_word[start_idx:end_idx]
                    if user_id_str.isdigit():
                        return int(user_id_str)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤–∏–¥–∞ vk.com/id123456 –∏–ª–∏ https://vk.com/id123456
            vk_url_patterns = [
                r"(?:https?://)?(?:www\.)?vk\.com/id(\d+)",  # https://vk.com/id123456
                r"(?:https?://)?(?:www\.)?vk\.me/id(\d+)",    # https://vk.me/id123456
                r"(?:https?://)?(?:www\.)?vk\.com/.*"         # –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫ vk.com/username
            ]
            
            for pattern in vk_url_patterns:
                import re
                match = re.match(pattern, first_word)
                if match:
                    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ID –≤ —Ñ–æ—Ä–º–∞—Ç–µ vk.com/id123456
                    if len(match.groups()) > 0 and match.group(1).isdigit():
                        return int(match.group(1))
                    else:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏ (screen_name)
                        try:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º screen_name –∏–∑ —Å—Å—ã–ª–∫–∏
                            parts = first_word.split("/")
                            screen_name = parts[-1]
                            if screen_name:
                                user_info = self.vk.users.get(user_ids=screen_name)
                                if user_info and len(user_info) > 0:
                                    return user_info[0]["id"]
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∏–∑ —Å—Å—ã–ª–∫–∏: {str(e)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –ø—Ä–æ—Å—Ç–æ @username
            if first_word.startswith("@"):
                screen_name = first_word[1:]
                try:
                    user_info = self.vk.users.get(user_ids=screen_name)
                    if user_info and len(user_info) > 0:
                        return user_info[0]["id"]
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∏–∑ @username: {str(e)}")
            
            # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã, 
            # –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –≤–æ –≤—Å–µ–π —Å—Ç—Ä–æ–∫–µ
            if ' ' in mention:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ [id123|Name]
                import re
                id_match = re.search(r'\[id(\d+)\|[^\]]+\]', mention)
                if id_match:
                    return int(id_match.group(1))
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ @
                at_match = re.search(r'@(\w+)', mention)
                if at_match:
                    screen_name = at_match.group(1)
                    try:
                        user_info = self.vk.users.get(user_ids=screen_name)
                        if user_info and len(user_info) > 0:
                            return user_info[0]["id"]
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∏–∑ @username –≤ –ø–æ–ª–Ω–æ–º —Ç–µ–∫—Å—Ç–µ: {str(e)}")
                    
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ ID –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}")
            return None
            
    def get_user_id_from_reply(self, message) -> Optional[int]:
        # –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
# message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª–µ reply_message
            if "reply_message" in message:
                reply = message["reply_message"]
                if "from_id" in reply:
                    return reply["from_id"]
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∏–∑ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return None

    def handle_message(self, event):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
# event: –°–æ–±—ã—Ç–∏–µ –æ—Ç VK API
        message = event.obj.message
        peer_id = message['peer_id']
        user_id = message['from_id']
        text = message.get('text', '').strip()
        
        # –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        db.add_user(user_id)
        
        # —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        db.update_message_count(user_id)
        
        # —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if text.startswith('/'):
            # –æ—Ç–¥–∞—ë–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
            self.handle_command(peer_id, user_id, text, message)
        else:
            # –ª–æ–≥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            if self.log_peer_id and peer_id > 2000000000:  # –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –ª–∏—á–∫—É
                log_text = text
                # –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ
                if len(log_text) > 100:
                    log_text = log_text[:97] + "..."
                
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥-–±–µ—Å–µ–¥—É
                self.send_log_message(
                    action="message",
                    admin_id=user_id,  # —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
                    peer_id=peer_id,
                    details=log_text
                )
            
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.is_muted(user_id) and not self.check_access(user_id, "moderator"):
                mute_until = db.get_mute(user_id)
                time_left = mute_until - int(time.time())
                # –µ—Å–ª–∏ –º—É—Ç –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω
                if time_left > 0:
                    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message_id = message.get('id')
                    if message_id:
                        # –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å
                        if not self.delete_message(peer_id, message_id):
                            logger.error(f"–ù–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
                    
                    # –ø–∏—à–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º—É—Ç–µ
                    self.send_message(
                        peer_id, 
                        f"[id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å], –≤—ã –≤ –º—É—Ç–µ. "
                        f"–û—Å—Ç–∞–ª–æ—Å—å: {format_time_delta(time_left)}"
                    )

    def handle_command(self, peer_id: int, user_id: int, text: str, message=None):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
#
# –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
# peer_id: ID –±–µ—Å–µ–¥—ã
# user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# text: –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
# message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        # –ø–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        command, args = parse_command(text)
        
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
        is_owner = self.is_conversation_owner(peer_id, user_id)
        if self.quiet_mode and not self.check_access(user_id, "moderator") and not is_owner:
            logger.info(f"–ò–≥–Ω–æ—Ä –∫–æ–º–∞–Ω–¥—ã –æ—Ç {user_id} –≤ —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ")
            return
            
        # –∞–Ω—Ç–∏—Å–ø–∞–º –∑–∞—â–∏—Ç–∞
        if not self.check_cooldown(user_id):
            self.send_message(peer_id, f"[id{user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å], —Ö–∞—Ä–æ—à —Å–ø–∞–º–∏—Ç—å!")
            return
            
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if not self.commands.has_command(command):
            return
        
        # –¥–æ—Å—Ç–∞–µ–º ID –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        cmd_requires_target = ["warn", "unwarn", "getwarn", "warnhistory", "kick", "ban", "unban", 
                             "mute", "unmute", "getmute", "setnick", "removenick", "getnick", 
                             "getacc", "chek", "getban", "reg", "addmoder", "addsenmoder", 
                             "addadmin", "removerole", "removeadmin", "stats"]
        
        if message and command in cmd_requires_target:
            # –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ ID/—É–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if "reply_message" in message and (not args or (not args[0].isdigit() and not args.startswith("[") and not args.startswith("@"))):
                target_id = self.get_user_id_from_reply(message)
                if target_id:
                    # –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ —Å ID (–±–µ–∑ –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
                    if command in ["unwarn", "getwarn", "warnhistory", "kick", "unban", "unmute", "getmute", "removenick", "getnick", "chek", "getban", "reg", "stats"]:
                        args = str(target_id) + (" " + args if args else "")
                    # –∫–æ–º–∞–Ω–¥—ã —Å ID + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    elif args and command in ["warn", "ban", "mute", "setnick", "addmoder", "addsenmoder", "addadmin", "removerole", "removeadmin"]:
                        args = str(target_id) + " " + args
                    else:
                        # –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ –∏—Ö –Ω–µ—Ç
                        if command in ["warn", "ban", "mute", "setnick", "addmoder", "addsenmoder", "addadmin", "removerole", "removeadmin"]:
                            msg = "‚ùó –£–∫–∞–∂–∏ "
                            if command == "warn" or command == "ban":
                                msg += "–ø—Ä–∏—á–∏–Ω—É."
                            elif command == "mute":
                                msg += "–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏—á–∏–Ω—É."
                            elif command == "setnick":
                                msg += "–Ω–∏–∫–Ω–µ–π–º."
                            elif command in ["addmoder", "addsenmoder", "addadmin", "removerole", "removeadmin"]:
                                msg += "–ø—Ä–∏—á–∏–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏."
                            self.send_message(peer_id, msg)
                            return
                        else:
                            args = str(target_id)
            
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π @username –∏ [id123|name]
        if args and command in cmd_requires_target:
            parts = args.split(" ", 1)
            first_arg = parts[0]
            
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if (first_arg.startswith("[") and "|" in first_arg) or first_arg.startswith("@"):
                target_id = self.extract_user_id_from_mention(first_arg)
                if target_id:
                    # –∑–∞–º–µ–Ω—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ ID
                    if len(parts) > 1:
                        args = str(target_id) + " " + parts[1]
                    else:
                        args = str(target_id)
            
        # –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫)
        self.executor.submit(
            self.commands.execute_command,
            command, peer_id, user_id, args
        )

    def process_events(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç VK API.
        try:
            for event in self.longpoll.listen():
                if event.type == VkBotEventType.MESSAGE_NEW:
                    # –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π
                    self.executor.submit(self.handle_message, event)
                    
                # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –º–µ—Ä–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
                # –Ω–∞–ø—Ä–∏–º–µ—Ä MessageEdit, ChatLeave –∏ —Ç.–¥.
        except Exception as e:
            logger.error(f"–ë–ª–∏–Ω, –æ—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏—è—Ö: {str(e)}")
            # –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫ –ø—Ä–∏ –æ–±—Ä—ã–≤–µ
            time.sleep(5)

    def process_delete_queue(self):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ.
        while True:
            try:
                # –Ω–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ —Å–µ–∫—É–Ω–¥—É
                time.sleep(1)  
                
                # –∑–∞–±–∏—Ä–∞–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ —á—Ç–æ –µ—Å—Ç—å —Å–µ–π—á–∞—Å
                with self.delete_lock:
                    messages_to_delete = self.delete_queue.copy()
                    self.delete_queue = []
                
                # —É–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                for peer_id, message_id in messages_to_delete:
                    self.delete_message(peer_id, message_id)
            except Exception as e:
                logger.error(f"–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}")
                time.sleep(5)

    def start_polling(self):
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.
        # –ø–æ—Ç–æ–∫ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω–∏—è
        threading.Thread(
            target=self.process_delete_queue, 
            daemon=True
        ).start()
        
        # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            try:
                self.process_events()
            except Exception as e:
                logger.error(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —É–ø–∞–ª: {str(e)}")
                time.sleep(5)  # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
